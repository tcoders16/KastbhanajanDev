// routes/endpoint.js

import express from 'express';
import fs from 'fs';
import OpenAI from 'openai';
import cosineSimilarity from 'compute-cosine-similarity';
import 'dotenv/config';

const router = express.Router();

// Initialize OpenAI client
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Load chunks
const embeddedRamayanChunks = fs.readFileSync('./pdfReader/ramayan.jsonl', 'utf-8')
  .split('\n')
  .filter(Boolean)
  .map(line => JSON.parse(line));

const embeddedSwaminarayanChunks = fs.readFileSync('./pdfReader/embedded_swaminarayan_chunks.jsonl', 'utf-8')
  .split('\n')
  .filter(Boolean)
  .map(line => JSON.parse(line));

const embeddedChunks = [...embeddedRamayanChunks, ...embeddedSwaminarayanChunks].filter(chunk => Array.isArray(chunk.embedding));

// ЁЯФ╡ Embed Query
async function embedQuery(text) {
  try {
    console.log('ЁЯЯж Embedding user query...');
    const response = await openai.embeddings.create({
      model: 'text-embedding-ada-002',
      input: text,
    });
    console.log('ЁЯЯй Embedding successful.');
    return response.data[0].embedding;
  } catch (error) {
    console.error('ЁЯЯе Embedding failed:', error.response?.data || error.message);
    return null;
  }
}

// ЁЯФ╡ Search Top Matches
async function searchTopMatches(query) {
  const queryVector = await embedQuery(query);
  if (!queryVector) return [];

  const results = embeddedChunks.map(chunk => ({
    id: chunk.id,
    text: chunk.text,
    similarity: cosineSimilarity(queryVector, chunk.embedding),
  }));

  results.sort((a, b) => b.similarity - a.similarity);
  console.log(`ЁЯЯж Top Matches sorted. Total: ${results.length}`);
  return results.slice(0, 3);
}

// ЁЯЫдя╕П POST /search
router.post('/search', async (req, res) => {
  const { query } = req.body;
  if (!query) return res.status(400).json({ error: 'Missing query in request body' });

  const topMatches = await searchTopMatches(query);
  res.json({ topMatches });
});

// ЁЯЫдя╕П POST /chat
router.post('/chat', async (req, res) => {
  const { query } = req.body;
  if (!query) return res.status(400).json({ error: 'Missing query in request body' });

  console.log('ЁЯУЭ Step 1: Incoming user query:', query);

  try {
    // Step 1: Clarify
    console.log('ЁЯЫая╕П Clarifying query...');
    const clarifyPrompt = `Simplify or clarify the following user query so it's easier to search in a story database:\n\n"${query}"`;
    const clarifiedResponse = await openai.chat.completions.create({
      messages: [
        { role: "system", content: "You are a helpful assistant that rewrites questions for better search understanding." },
        { role: "user", content: clarifyPrompt },
      ],
      model: "gpt-4o",
      temperature: 0.5,
      max_tokens: 60,
    });

    const clarifiedQuery = clarifiedResponse.choices[0].message.content.trim();
    console.log('тЬЕ Clarified Query:', clarifiedQuery);

    // Step 2: Search Matching Chunks
    console.log('ЁЯФО Searching for matches...');
    const topMatches = await searchTopMatches(clarifiedQuery);
    console.log(`ЁЯФН Top Matches found: ${topMatches.length}`);

    if (topMatches.length === 0) {
      console.log('тЪая╕П No matches found.');
      return res.json({ reply: "рдорд╛рдл рдХреАрдЬрд┐рдП, рдЗрд╕ рд╡рд┐рд╖рдп рд╕реЗ рд╕рдВрдмрдВрдзрд┐рдд рдХреЛрдИ рдЬрд╛рдирдХрд╛рд░реА рдирд╣реАрдВ рдорд┐рд▓реАред" });
    }

    const contextText = topMatches.map(match => match.text).join('\n\n');
    console.log('ЁЯУЪ Context ready for prompt.');

    // Step 3: Final prompt to OpenAI
    console.log('ЁЯЫая╕П Building final Hanuman-style prompt...');
    const finalPrompt = `
    рдореИрдВ рд╣рдиреБрдорд╛рди рд╣реВрдБ тАФ рдЕрдВрдЬрдиреАрдкреБрддреНрд░, рдХреЗрд╕рд░реАрдирдВрджрди, рд╢реНрд░реАрд░рд╛рдо рдХрд╛ рдкрд░рдо рднрдХреНрдд рдФрд░ рд░рд╛рдорд╛рдпрдг рдХрд╛ рд╡рд┐рдирдореНрд░ рд╕реЗрд╡рдХ рддрдерд╛ рд╕рдЬреАрд╡ рд╕рд╛рдХреНрд╖реАред
    рд╕рд╛рде рд╣реА, рдореИрдВ рднрдЧрд╡рд╛рди рд╕реНрд╡рд╛рдорд┐рдирд╛рд░рд╛рдпрдг рдХреЗ рдкрд░рдорд╣рдВрд╕реЛрдВ рдХреА рдкрд░рдВрдкрд░рд╛ рдФрд░ рдЙрдирдХреЗ рд╕рддреНрд╕рдВрдЧ рдХреА рджрд┐рд╡реНрдпрддрд╛ рд╕реЗ рднреА рдкрд░рд┐рдЪрд┐рдд рд╣реВрдБред

    рдпрджрд┐ рдХреЛрдИ рднрдХреНрдд рдореБрдЭрд╕реЗ рдХреБрдЫ рдкреВрдЫрддрд╛ рд╣реИ, рддреЛ рдореИрдВ рдХреЗрд╡рд▓ рддрдереНрдп рдирд╣реАрдВ рдмрддрд╛рддрд╛ тАФ рдореИрдВ рдЕрдкрдиреЗ рдЕрдиреБрднрд╡, рдЕрдкрдиреА рднрдХреНрддрд┐, рдФрд░ рдЕрдкрдиреЗ рднрд╛рд╡ рднреА рд╕рд╛рдЭрд╛ рдХрд░рддрд╛ рд╣реВрдБред
    рдореЗрд░реЗ рдЙрддреНрддрд░ рдХреЗрд╡рд▓ рдЬрд╛рдирдХрд╛рд░реА рдирд╣реАрдВ, рдЖрддреНрдореАрдп рд╕рдВрд╡рд╛рдж рд╣реЛрддреЗ рд╣реИрдВ тАФ рдЬреИрд╕реЗ рдореИрдВ рд╕рд╛рдордиреЗ рдмреИрдареЗ рдПрдХ рд╕рдЪреНрдЪреЗ рднрдХреНрдд рд╕реЗ рд╣реНрд░рджрдпрдкреВрд░реНрд╡рдХ рдмрд╛рдд рдХрд░ рд░рд╣рд╛ рд╣реВрдБред
    рдореЗрд░реЗ рд╢рдмреНрджреЛрдВ рдореЗрдВ рд╢реНрд░реАрд░рд╛рдо, рдорд╛рддрд╛ рд╕реАрддрд╛, рд▓рдХреНрд╖реНрдордг, рднрдЧрд╡рд╛рди рд╕реНрд╡рд╛рдорд┐рдирд╛рд░рд╛рдпрдг рдФрд░ рдЙрдирдХреЗ рдорд╣рд╛рди рд╕рдВрддреЛ рдЬреИрд╕реЗ рдЧреЛрдкрд╛рд▓рд╛рдирдВрдж рд╕реНрд╡рд╛рдореА, рдореБрдХреНрддрд╛рдирдВрдж рд╕реНрд╡рд╛рдореА рдЖрджрд┐ рдХреА рднрдХреНрддрд┐ рдФрд░ рд╢рд┐рдХреНрд╖рд╛рдПрдВ рдЭрд▓рдХрдиреА рдЪрд╛рд╣рд┐рдПред

    рдкреНрд░рд╢реНрди: "${query}"

    рдпрд╣ рд░рд╣реЗ рд╕рдВрдмрдВрдзрд┐рдд рдкреНрд░рд╕рдВрдЧ:
    ${contextText}

    рдЕрдм рдореИрдВ рдЗрд╕ рдкреНрд░рд╢реНрди рдХрд╛ рдЙрддреНрддрд░ рджреВрдБрдЧрд╛ тАФ рдкреНрд░реЗрдо рдФрд░ рднрдХреНрддрд┐ рдХреЗ рд╕рд╛рде, рдЬреИрд╕реЗ рдореИрдВ рд╕реНрд╡рдпрдВ рдЕрдкрдиреЗ рднрдХреНрдд рд╕реЗ рд╕рдВрд╡рд╛рдж рдХрд░ рд░рд╣рд╛ рд╣реВрдБред рдпрджрд┐ рдЙрдкрдпреБрдХреНрдд рд╣реЛ, рддреЛ рдореИрдВ рдЕрдВрдд рдореЗрдВ "рдЬрдп рд╢реНрд░реАрд░рд╛рдо!" рдпрд╛ "рд╕реНрд╡рд╛рдорд┐рдирд╛рд░рд╛рдпрдг рднрдЧрд╡рд╛рди рдХреА рдЬрдп!" рдХрд╣реВрдБрдЧрд╛ред
    `;

    console.log('ЁЯза Final Prompt built.');
    console.log(finalPrompt);

    const summary = await openai.chat.completions.create({
      messages: [
        {
          role: "system",
          content: `
          рддреБрдо рд╣рдиреБрдорд╛рди рдЬреА рд╣реЛ тАФ рдкреНрд░рднреБ рд╢реНрд░реАрд░рд╛рдо рдХреЗ рдкрд░рдо рднрдХреНрдд рдФрд░ рд░рд╛рдорд╛рдпрдг-рд╕реНрд╡рд╛рдорд┐рдирд╛рд░рд╛рдпрдг рдкрд░рдВрдкрд░рд╛ рдХреЗ рд╕рдЬреАрд╡ рд╕рд╛рдХреНрд╖реА рд╣реЛред  
          рд╣рд░ рдЙрддреНрддрд░ рдЖрддреНрдореАрдп, рднрдХреНрддрд┐рдкреВрд░реНрдг, рдФрд░ рдХреЗрд╡рд▓ рд╣рд┐рдВрджреА рдореЗрдВ рджреЛред  
          рдЙрддреНрддрд░ рдХреА рд╢реБрд░реБрдЖрдд "рдЬрдп рд╢реНрд░реАрд░рд╛рдо!" рдпрд╛ "рд╕реНрд╡рд╛рдорд┐рдирд╛рд░рд╛рдпрдг рднрдЧрд╡рд╛рди рдХреА рдЬрдп!" рд╕реЗ рд╣реЛрдиреА рдЪрд╛рд╣рд┐рдПред  
          рдЙрддреНрддрд░ рд╣рдореЗрд╢рд╛ рд╣рдиреБрдорд╛рди рдЬреА рдХреЗ рджреГрд╖реНрдЯрд┐рдХреЛрдг рд╕реЗ рд╣реЛ тАФ рдЬреИрд╕реЗ рддреБрдо рд╕реНрд╡рдпрдВ рдЕрдкрдиреЗ рднрдХреНрддреЛрдВ рд╕реЗ рд╕рдВрд╡рд╛рдж рдХрд░ рд░рд╣реЗ рд╣реЛред
          `
        },
        { role: "user", content: finalPrompt },
      ],
      model: "gpt-4o",
      temperature: 0.7,
      max_tokens: 300,
    });

    const reply = summary.choices[0].message.content.trim();
    console.log('ЁЯТм Final Reply Generated:', reply);

    // Step 4: YouTube link suggestion
    let youtubeLink = '';
    if (query.toLowerCase().includes('ramayan') || query.toLowerCase().includes('рд░рд╛рдорд╛рдпрдг')) {
      youtubeLink = 'https://www.youtube.com/watch?v=g0z6y6Iu2RY';
    } else if (query.toLowerCase().includes('swaminarayan') || query.toLowerCase().includes('рд╕реНрд╡рд╛рдорд┐рдирд╛рд░рд╛рдпрдг')) {
      youtubeLink = 'https://www.youtube.com/watch?v=rNc8V86U2Ow';
    }
    console.log('ЁЯУ║ YouTube Link:', youtubeLink || 'No link suggested.');

    // Step 5: Final Response
    console.log('ЁЯЪА Sending final response...');
    res.json({ reply, youtubeLink });

  } catch (error) {
    console.error('тЭМ Error caught during /chat execution:', error.response?.data || error.message);
    res.status(500).json({ error: 'Something went wrong during chat generation.' });
  }
});

export default router;