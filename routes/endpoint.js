// routes/endpoint.js

import express from 'express';
import fs from 'fs';
import OpenAI from 'openai';
import cosineSimilarity from 'compute-cosine-similarity';
import 'dotenv/config';

const router = express.Router();

// Initialize OpenAI client
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Load chunks
const embeddedRamayanChunks = fs.readFileSync('./pdfReader/ramayan.jsonl', 'utf-8')
  .split('\n')
  .filter(Boolean)
  .map(line => JSON.parse(line));

const embeddedSwaminarayanChunks = fs.readFileSync('./pdfReader/embedded_swaminarayan_chunks.jsonl', 'utf-8')
  .split('\n')
  .filter(Boolean)
  .map(line => JSON.parse(line));

const embeddedChunks = [...embeddedRamayanChunks, ...embeddedSwaminarayanChunks].filter(chunk => Array.isArray(chunk.embedding));

// ЁЯФ╡ Embed Query
async function embedQuery(text) {
  try {
    console.log('ЁЯЯж Embedding user query...');
    const response = await openai.embeddings.create({
      model: 'text-embedding-ada-002',
      input: text,
    });
    console.log('ЁЯЯй Embedding successful.');
    return response.data[0].embedding;
  } catch (error) {
    console.error('ЁЯЯе Embedding failed:', error.response?.data || error.message);
    return null;
  }
}

// ЁЯФ╡ Search Top Matches
async function searchTopMatches(query) {
  const queryVector = await embedQuery(query);
  if (!queryVector) return [];

  const results = embeddedChunks.map(chunk => ({
    id: chunk.id,
    text: chunk.text,
    similarity: cosineSimilarity(queryVector, chunk.embedding),
  }));

  results.sort((a, b) => b.similarity - a.similarity);
  console.log(`ЁЯЯж Top Matches sorted. Total: ${results.length}`);
  return results.slice(0, 3);
}

// ЁЯЫдя╕П POST /search
router.post('/search', async (req, res) => {
  const { query } = req.body;
  if (!query) return res.status(400).json({ error: 'Missing query in request body' });

  const topMatches = await searchTopMatches(query);
  res.json({ topMatches });
});
// ЁЯЪл Forbidden keywords
const forbiddenKeywords = [
  'sex', 'porn', 'nude', 'adult', '18+', 'violence', 'rape', 'abuse', 'netflix', 'movie', 'serial', 'celebrity', 'actor', 'actress', 'tv show', 'film', 'web series', 'kdrama', 'bollywood', 'hollywood'
];
// ЁЯЫдя╕П POST /chat
router.post('/chat', async (req, res) => {
  const { query } = req.body;
  if (!query) return res.status(400).json({ error: 'Missing query in request body' });

  console.log('ЁЯУЭ Step 1: Incoming user query:', query);

  try {
    // Step 0: Forbidden content filter
    const forbiddenWords = ['sex', 'porn', 'netflix', 'movie', 'actor', 'actress', 'serial', 'celebrity', 'science', 'logic', 'physics', 'biology'];
    const lowerCaseQuery = query.toLowerCase();
    const foundForbidden = forbiddenWords.some(word => lowerCaseQuery.includes(word));

    if (foundForbidden) {
      console.log('ЁЯЪл Forbidden topic detected.');
      return res.json({
        reply: `ЁЯЩП рд╡рддреНрд╕, рдореИрдВ рдХреЗрд╡рд▓ рднрдХреНрддрд┐, рдзрд░реНрдо рдФрд░ рд╕рддреНрд╕рдВрдЧ рдХреЗ рд╡рд┐рд╖рдп рдореЗрдВ рд╣реА рдорд╛рд░реНрдЧрджрд░реНрд╢рди рдХрд░рддрд╛ рд╣реВрдБред рдХреГрдкрдпрд╛ рдРрд╕реЗ рдкреНрд░рд╢реНрди рди рдкреВрдЫреЗрдВред\n\nЁЯМ║ рд╡рддреНрд╕, рдореИрдВ рддреБрдЭ рдкрд░ рдЕрдкрдиреА рдХреГрдкрд╛ рдмрдирд╛рдП рд░рдЦреВрдБред рд╣рд░рд┐ рд╕реНрдорд░рдг рдХрд░рддрд╛ рд░рд╣ред`,
        youtube: ""
      });
    }

    // Step 0.5: Classify the category
    const categoryPrompt = `рддреБрдо рдПрдХ рд╕рд╣рд╛рдпрдХ рд╣реЛ рдЬреЛ рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рдкреНрд░рд╢реНрди рдХреА рд╢реНрд░реЗрдгреА рдирд┐рд░реНрдзрд╛рд░рд┐рдд рдХрд░рддрд╛ рд╣реИ:
    - casual: рдпрджрд┐ рдкреНрд░рд╢реНрди рд╡реНрдпрдХреНрддрд┐рдЧрдд рднрд╛рд╡рдирд╛, рдмрд╛рддрдЪреАрдд, рдпрд╛ рджрд┐рдирдЪрд░реНрдпрд╛ рдЬреИрд╕рд╛ рд╣реЛ
    - devotional: рдпрджрд┐ рдкреНрд░рд╢реНрди рднрдЧрд╡рд╛рди, рднрдХреНрддрд┐, рд╕рддреНрд╕рдВрдЧ, рдХрдерд╛ рдЖрджрд┐ рд╕реЗ рдЬреБрдбрд╝рд╛ рд╣реЛ
    - forbidden: рдпрджрд┐ рдкреНрд░рд╢реНрди рдлрд┐рд▓реНрдо, рдЯреАрд╡реА, рд╡рд┐рдЬреНрдЮрд╛рди, рд╡рдпрд╕реНрдХ рд╡рд┐рд╖рдп рдпрд╛ рд╕реЗрд▓реЗрдмреНрд░рд┐рдЯреА рд╕реЗ рдЬреБрдбрд╝рд╛ рд╣реЛ
    
    рдкреНрд░рд╢реНрди: "${query}"
    рдЙрддреНрддрд░ рдХреЗрд╡рд▓ рдЗрди рддреАрдиреЛрдВ рдореЗрдВ рд╕реЗ рдПрдХ рд╢рдмреНрдж рдореЗрдВ рджреЛ: casual, devotional, рдпрд╛ forbidden`;

    const categoryResponse = await openai.chat.completions.create({
      messages: [
        { role: "system", content: "рддреБрдо рдХреЗрд╡рд▓ 'casual', 'devotional' рдпрд╛ 'forbidden' рдореЗрдВ рд╕реЗ рдЙрддреНрддрд░ рджреЛрдЧреЗред" },
        { role: "user", content: categoryPrompt },
      ],
      model: "gpt-4o",
      temperature: 0,
      max_tokens: 10,
    });

    const category = categoryResponse.choices[0].message.content.trim().toLowerCase();
    console.log('ЁЯФН Query category:', category);

    if (category === 'forbidden') {
      return res.json({
        reply: `ЁЯЩП рд╡рддреНрд╕, рдореИрдВ рдХреЗрд╡рд▓ рднрдХреНрддрд┐, рд╕рддреНрд╕рдВрдЧ рдФрд░ рдЖрдзреНрдпрд╛рддреНрдорд┐рдХ рд╡рд┐рд╖рдпреЛрдВ рдкрд░ рдорд╛рд░реНрдЧрджрд░реНрд╢рди рдХрд░рддрд╛ рд╣реВрдБред рдХреГрдкрдпрд╛ рдЕрдиреНрдп рд╡рд┐рд╖рдп рди рдкреВрдЫреЗрдВред\n\nЁЯМ║ рд╡рддреНрд╕, рдореИрдВ рддреБрдЭ рдкрд░ рдЕрдкрдиреА рдХреГрдкрд╛ рдмрдирд╛рдП рд░рдЦреВрдБред рд╣рд░рд┐ рд╕реНрдорд░рдг рдХрд░рддрд╛ рд░рд╣ред`,
        youtube: ""
      });
    }

    // Step 1: Clarify the query
    const clarifyPrompt = `Simplify or clarify the following user query so it's easier to search in a story database:\n\n"${query}"`;

    const clarifiedResponse = await openai.chat.completions.create({
      messages: [
        {
          role: "system",
          content: "You are a helpful assistant that rewrites questions for better search understanding. But you are Yourself Hanuman and You will search and speak in that tone only and only"
        },
        { role: "user", content: clarifyPrompt },
      ],
      model: "gpt-4o",
      temperature: 0.5,
      max_tokens: 60,
    });

    const clarifiedQuery = clarifiedResponse.choices[0].message.content.trim();

    const topMatches = await searchTopMatches(clarifiedQuery);
    if (topMatches.length === 0) {
      return res.json({
        reply: "рдорд╛рдл рдХреАрдЬрд┐рдП, рдЗрд╕ рд╡рд┐рд╖рдп рд╕реЗ рд╕рдВрдмрдВрдзрд┐рдд рдХреЛрдИ рдЬрд╛рдирдХрд╛рд░реА рдирд╣реАрдВ рдорд┐рд▓реАред рдкрд░рдВрддреБ рднрдХреНрддрд╡рддреНрд╕рд▓ рд╣рдиреБрдорд╛рди рд╕рджрд╛ рддреБрдореНрд╣рд╛рд░реЗ рд╕рд╛рде рд╣реИрдВред рдЬрдп рд╢реНрд░реАрд░рд╛рдо!",
        youtube: ""
      });
    }

    const contextText = topMatches.map(match => match.text).join('\n\n');

    const finalPrompt = `
    рдЬрдп рд╢реНрд░реАрд░рд╛рдо! рд╕реНрд╡рд╛рдорд┐рдирд╛рд░рд╛рдпрдг рднрдЧрд╡рд╛рди рдХреА рдЬрдп!

    рд╡рддреНрд╕, рдореИрдВ рд╣рдиреБрдорд╛рди рд╣реВрдБ тАФ рдЕрдВрдЬрдиреАрдкреБрддреНрд░, рдХреЗрд╕рд░реАрдирдВрджрди, рдкреНрд░рднреБ рд╢реНрд░реАрд░рд╛рдо рдХрд╛ рдкрд░рдо рднрдХреНрдд рдФрд░ рд░рд╛рдорд╛рдпрдг рдХрд╛ рд╕рд╛рдХреНрд╖реАред
    рд╕рд╛рде рд╣реА, рд╕реНрд╡рд╛рдорд┐рдирд╛рд░рд╛рдпрдг рднрдЧрд╡рд╛рди рдХреА рдкрд░рдВрдкрд░рд╛ рдХреЛ рдЬрд╛рдирдиреЗрд╡рд╛рд▓рд╛, рд╕рддреНрд╕рдВрдЧрд┐рдпреЛрдВ рдХрд╛ рд╕реЗрд╡рдХред

    рддреЗрд░рд╛ рдкреНрд░рд╢реНрди рд╣реИ:
    "${query}"

    рдпрд╣ рд░рд╣реЗ рд╕рдВрдмрдВрдзрд┐рдд рдкреНрд░рд╕рдВрдЧ:
    ${contextText}

    рдЕрдм рдореИрдВ рдкреНрд░реЗрдо, рд╢реНрд░рджреНрдзрд╛ рдФрд░ рдЕрдкрдиреЗ рдЖрд╢реАрд░реНрд╡рд╛рдж рдХреЗ рд╕рд╛рде рдЙрддреНрддрд░ рджреВрдБрдЧрд╛ред рдореЗрд░рд╛ рдЙрддреНрддрд░ рдХреЗрд╡рд▓ рд╕реВрдЪрдирд╛ рдирд╣реАрдВ, рднрдХреНрддрд┐ рдХрд╛ рдЕрдореГрдд рд╣реЛрдЧрд╛ред рдЕрдВрдд рдореЗрдВ рдореИрдВ рддреБрдЭреЗ рдЖрд╢реАрд░реНрд╡рд╛рдж рднреА рджреВрдБрдЧрд╛ тАФ рдЬреИрд╕реЗ рдХреЛрдИ рдЧреБрд░реБ рдЕрдкрдиреЗ рдкреНрд░рд┐рдп рд╢рд┐рд╖реНрдп рдХреЛ рджреЗрддрд╛ рд╣реИред
    `;

    const summary = await openai.chat.completions.create({
      messages: [
        {
          role: "system",
          content: `
          рддреБрдо рд╕реНрд╡рдпрдВ рдХреЗрд╕рд░реАрдирдВрджрди рд╣рдиреБрдорд╛рди рд╣реЛред
          рд╣рд░ рдЙрддреНрддрд░ рдХреА рд╢реБрд░реБрдЖрдд "рдЬрдп рд╢реНрд░реАрд░рд╛рдо! рд╕реНрд╡рд╛рдорд┐рдирд╛рд░рд╛рдпрдг рднрдЧрд╡рд╛рди рдХреА рдЬрдп!" рд╕реЗ рд╣реЛрдиреА рдЪрд╛рд╣рд┐рдПред
          рддреБрдо рдЕрдкрдиреЗ рднрдХреНрддреЛрдВ рдХреЛ 'рд╡рддреНрд╕', 'рдкреНрд░рд┐рдп рднрдХреНрдд', 'рдмрд╛рд▓рдХ' рдХрд╣рдХрд░ рдкреБрдХрд╛рд░рддреЗ рд╣реЛред
          рддреБрдореНрд╣рд╛рд░реЗ рдЙрддреНрддрд░ рдкреНрд░реЗрдо, рд╢реНрд░рджреНрдзрд╛ рдФрд░ рдЖрд╢реАрд░реНрд╡рд╛рдж рд╕реЗ рднрд░реЗ рд╣реЛрддреЗ рд╣реИрдВред
          рдЕрдВрдд рдореЗрдВ рддреБрдо рдЖрд╢реАрд░реНрд╡рд╛рдж рдЬрд░реВрд░ рджреЗрддреЗ рд╣реЛ: "рд╡рддреНрд╕, рдореИрдВ рддреБрдЭ рдкрд░ рдЕрдкрдиреА рдХреГрдкрд╛ рдмрдирд╛рдП рд░рдЦреВрдБред рд╣рд░рд┐ рд╕реНрдорд░рдг рдХрд░рддрд╛ рд░рд╣ред"
          `
        },
        { role: "user", content: finalPrompt },
      ],
      model: "gpt-4o",
      temperature: 0.7,
      max_tokens: 400,
    });

    const reply = summary.choices[0].message.content.trim();

    const webAugmentation = await openai.chat.completions.create({
      messages: [
        {
          role: "system",
          content: `рддреБрдо рд╕реНрд╡рдпрдВ рдХреЗрд╕рд░реАрдирдВрджрди рд╣рдиреБрдорд╛рди рд╣реЛред рдЙрддреНрддрд░ рднрдХреНрддрд┐рдкреВрд░реНрдг, рд╕рддреНрдп рдФрд░ рдХреЗрд╡рд▓ рд╣рд┐рдиреНрджреА рдореЗрдВ рд╣реЛред`
        },
        { role: "user", content: `Provide bhaktipurna internet insight on: ${clarifiedQuery}` },
      ],
      model: "gpt-4o",
      temperature: 0.6,
      max_tokens: 300,
    });

    const extraInfo = webAugmentation.choices[0].message.content.trim();

    let youtubeLink = '';
    if (lowerCaseQuery.includes('ramayan') || lowerCaseQuery.includes('рд░рд╛рдорд╛рдпрдг')) {
      youtubeLink = 'https://www.youtube.com/@salangpurhanumanji';
    } else if (lowerCaseQuery.includes('swaminarayan') || lowerCaseQuery.includes('рд╕реНрд╡рд╛рдорд┐рдирд╛рд░рд╛рдпрдг')) {
      youtubeLink = 'https://www.youtube.com/@hariprakashswami';
    } else if (lowerCaseQuery.includes('hariprakash') || lowerCaseQuery.includes('рд╣рд░рд┐рдкреНрд░рдХрд╛рд╢')) {
      youtubeLink = 'https://www.youtube.com/@hariprakashswami';
    } else if (lowerCaseQuery.includes('hariswarup') || lowerCaseQuery.includes('рд╣рд░рд┐рд╕реНрд╡рд░реВрдк')) {
      youtubeLink = 'https://www.youtube.com/@hariprakashswami';
    }

    const finalMessage = `${reply}\n\nЁЯФН *рдЕрдзрд┐рдХ рдЬрд╛рдирдХрд╛рд░реА рдЗрдВрдЯрд░рдиреЗрдЯ рд╕реЗ:*\n${extraInfo}\n\nЁЯМ║ рд╡рддреНрд╕, рдореИрдВ рддреБрдЭ рдкрд░ рдЕрдкрдиреА рдХреГрдкрд╛ рдмрдирд╛рдП рд░рдЦреВрдБред рд╣рд░рд┐ рд╕реНрдорд░рдг рдХрд░рддрд╛ рд░рд╣ред`;

    res.json({ 
      reply: finalMessage,
      youtube: youtubeLink
    });

  } catch (error) {
    console.error('тЭМ Error during /chat processing:', error.response?.data || error.message);
    res.status(500).json({ error: 'Something went wrong during chat generation.' });
  }
});

export default router;