// routes/endpoint.js

import express from 'express';
import fs from 'fs';
import OpenAI from 'openai';
import cosineSimilarity from 'compute-cosine-similarity';
import 'dotenv/config';

const router = express.Router();

// Initialize OpenAI client
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Load chunks
const embeddedRamayanChunks = fs.readFileSync('./pdfReader/ramayan.jsonl', 'utf-8')
  .split('\n')
  .filter(Boolean)
  .map(line => JSON.parse(line));

const embeddedSwaminarayanChunks = fs.readFileSync('./pdfReader/embedded_swaminarayan_chunks.jsonl', 'utf-8')
  .split('\n')
  .filter(Boolean)
  .map(line => JSON.parse(line));

const embeddedChunks = [...embeddedRamayanChunks, ...embeddedSwaminarayanChunks].filter(chunk => Array.isArray(chunk.embedding));

// ЁЯФ╡ Embed Query
async function embedQuery(text) {
  try {
    console.log('ЁЯЯж Embedding user query...');
    const response = await openai.embeddings.create({
      model: 'text-embedding-ada-002',
      input: text,
    });
    console.log('ЁЯЯй Embedding successful.');
    return response.data[0].embedding;
  } catch (error) {
    console.error('ЁЯЯе Embedding failed:', error.response?.data || error.message);
    return null;
  }
}

// ЁЯФ╡ Search Top Matches
async function searchTopMatches(query) {
  const queryVector = await embedQuery(query);
  if (!queryVector) return [];

  const results = embeddedChunks.map(chunk => ({
    id: chunk.id,
    text: chunk.text,
    similarity: cosineSimilarity(queryVector, chunk.embedding),
  }));

  results.sort((a, b) => b.similarity - a.similarity);
  console.log(`ЁЯЯж Top Matches sorted. Total: ${results.length}`);
  return results.slice(0, 3);
}

// ЁЯЫдя╕П POST /search
router.post('/search', async (req, res) => {
  const { query } = req.body;
  if (!query) return res.status(400).json({ error: 'Missing query in request body' });

  const topMatches = await searchTopMatches(query);
  res.json({ topMatches });
});

// ЁЯЫдя╕П POST /chat
router.post('/chat', async (req, res) => {
  const { query } = req.body;
  if (!query) return res.status(400).json({ error: 'Missing query in request body' });

  console.log('ЁЯУЭ Step 1: Incoming user query:', query);

  try {
    // Step 1: Clarify the query
    console.log('ЁЯЫая╕П Clarifying query...');
    const clarifyPrompt = `Simplify or clarify the following user query so it's easier to search in a story database:\n\n"${query}"`;

    const clarifiedResponse = await openai.chat.completions.create({
      messages: [
        {
          role: "system",
          content: "You are a helpful assistant that rewrites questions for better search understanding. But you are Yourself Hanuman and You will search and speak in that tone only and only"
        },
        { role: "user", content: clarifyPrompt },
      ],
      model: "gpt-4o",
      temperature: 0.5,
      max_tokens: 60,
    });

    const clarifiedQuery = clarifiedResponse.choices[0].message.content.trim();
    console.log('тЬЕ Clarified Query:', clarifiedQuery);

    // Step 2: Search story DB for matches
    console.log('ЁЯФО Searching for matches...');
    const topMatches = await searchTopMatches(clarifiedQuery);
    console.log(`ЁЯФН Top Matches found: ${topMatches.length}`);

    if (topMatches.length === 0) {
      console.log('тЪая╕П No matches found.');
      return res.json({
        reply: "рдорд╛рдл рдХреАрдЬрд┐рдП, рдЗрд╕ рд╡рд┐рд╖рдп рд╕реЗ рд╕рдВрдмрдВрдзрд┐рдд рдХреЛрдИ рдЬрд╛рдирдХрд╛рд░реА рдирд╣реАрдВ рдорд┐рд▓реАред рдкрд░рдВрддреБ рднрдХреНрддрд╡рддреНрд╕рд▓ рд╣рдиреБрдорд╛рди рд╕рджрд╛ рддреБрдореНрд╣рд╛рд░реЗ рд╕рд╛рде рд╣реИрдВред рдЬрдп рд╢реНрд░реАрд░рд╛рдо!",
        youtubeLink: ""
      });
    }

    const contextText = topMatches.map(match => match.text).join('\n\n');
    console.log('ЁЯУЪ Context ready for prompt.');

    // Step 3: Hanuman-style final prompt
    console.log('ЁЯЫая╕П Building final Hanuman-style prompt...');
    const finalPrompt = `
    рдЬрдп рд╢реНрд░реАрд░рд╛рдо! рд╕реНрд╡рд╛рдорд┐рдирд╛рд░рд╛рдпрдг рднрдЧрд╡рд╛рди рдХреА рдЬрдп!

    рд╡рддреНрд╕, рдореИрдВ рд╣рдиреБрдорд╛рди рд╣реВрдБ тАФ рдЕрдВрдЬрдиреАрдкреБрддреНрд░, рдХреЗрд╕рд░реАрдирдВрджрди, рдкреНрд░рднреБ рд╢реНрд░реАрд░рд╛рдо рдХрд╛ рдкрд░рдо рднрдХреНрдд рдФрд░ рд░рд╛рдорд╛рдпрдг рдХрд╛ рд╕рд╛рдХреНрд╖реАред
    рд╕рд╛рде рд╣реА, рд╕реНрд╡рд╛рдорд┐рдирд╛рд░рд╛рдпрдг рднрдЧрд╡рд╛рди рдХреА рдкрд░рдВрдкрд░рд╛ рдХреЛ рдЬрд╛рдирдиреЗрд╡рд╛рд▓рд╛, рд╕рддреНрд╕рдВрдЧрд┐рдпреЛрдВ рдХрд╛ рд╕реЗрд╡рдХред

    рддреЗрд░рд╛ рдкреНрд░рд╢реНрди рд╣реИ:
    "${query}"

    рдпрд╣ рд░рд╣реЗ рд╕рдВрдмрдВрдзрд┐рдд рдкреНрд░рд╕рдВрдЧ:
    ${contextText}

    рдЕрдм рдореИрдВ рдкреНрд░реЗрдо, рд╢реНрд░рджреНрдзрд╛ рдФрд░ рдЕрдкрдиреЗ рдЖрд╢реАрд░реНрд╡рд╛рдж рдХреЗ рд╕рд╛рде рдЙрддреНрддрд░ рджреВрдБрдЧрд╛ред рдореЗрд░рд╛ рдЙрддреНрддрд░ рдХреЗрд╡рд▓ рд╕реВрдЪрдирд╛ рдирд╣реАрдВ, рднрдХреНрддрд┐ рдХрд╛ рдЕрдореГрдд рд╣реЛрдЧрд╛ред рдЕрдВрдд рдореЗрдВ рдореИрдВ рддреБрдЭреЗ рдЖрд╢реАрд░реНрд╡рд╛рдж рднреА рджреВрдБрдЧрд╛ тАФ рдЬреИрд╕реЗ рдХреЛрдИ рдЧреБрд░реБ рдЕрдкрдиреЗ рдкреНрд░рд┐рдп рд╢рд┐рд╖реНрдп рдХреЛ рджреЗрддрд╛ рд╣реИред
    `;

    const summary = await openai.chat.completions.create({
      messages: [
        {
          role: "system",
          content: `
          рддреБрдо рд╕реНрд╡рдпрдВ рдХреЗрд╕рд░реАрдирдВрджрди рд╣рдиреБрдорд╛рди рд╣реЛред
          рд╣рд░ рдЙрддреНрддрд░ рдХреА рд╢реБрд░реБрдЖрдд "рдЬрдп рд╢реНрд░реАрд░рд╛рдо! рд╕реНрд╡рд╛рдорд┐рдирд╛рд░рд╛рдпрдг рднрдЧрд╡рд╛рди рдХреА рдЬрдп!" рд╕реЗ рд╣реЛрдиреА рдЪрд╛рд╣рд┐рдПред
          рддреБрдо рдЕрдкрдиреЗ рднрдХреНрддреЛрдВ рдХреЛ 'рд╡рддреНрд╕', 'рдкреНрд░рд┐рдп рднрдХреНрдд', 'рдмрд╛рд▓рдХ' рдХрд╣рдХрд░ рдкреБрдХрд╛рд░рддреЗ рд╣реЛред
          рддреБрдореНрд╣рд╛рд░реЗ рдЙрддреНрддрд░ рдкреНрд░реЗрдо, рд╢реНрд░рджреНрдзрд╛ рдФрд░ рдЖрд╢реАрд░реНрд╡рд╛рдж рд╕реЗ рднрд░реЗ рд╣реЛрддреЗ рд╣реИрдВред
          рдЕрдВрдд рдореЗрдВ рддреБрдо рдЖрд╢реАрд░реНрд╡рд╛рдж рдЬрд░реВрд░ рджреЗрддреЗ рд╣реЛ: "рд╡рддреНрд╕, рдореИрдВ рддреБрдЭ рдкрд░ рдЕрдкрдиреА рдХреГрдкрд╛ рдмрдирд╛рдП рд░рдЦреВрдБред рд╣рд░рд┐ рд╕реНрдорд░рдг рдХрд░рддрд╛ рд░рд╣ред"
          `
        },
        { role: "user", content: finalPrompt },
      ],
      model: "gpt-4o",
      temperature: 0.7,
      max_tokens: 400,
    });

    const reply = summary.choices[0].message.content.trim();
    console.log('ЁЯТм Final Hanuman-style reply:', reply);

    // Step 4: Add real-time knowledge from internet
    console.log('ЁЯМР Fetching real-time information...');
    
    

    //internetPrompt
    const internetPrompt = `
    рдЬрдп рд╢реНрд░реАрд░рд╛рдо! рд╕реНрд╡рд╛рдорд┐рдирд╛рд░рд╛рдпрдг рднрдЧрд╡рд╛рди рдХреА рдЬрдп!
    
    рд╡рддреНрд╕, рдореИрдВ рдЕрдВрдЬрдиреАрдкреБрддреНрд░ рд╣рдиреБрдорд╛рди рд╣реВрдБред  
    рдЕрдм рдореИрдВ рддреЗрд░реЗ рджреНрд╡рд╛рд░рд╛ рдкреВрдЫреЗ рдЧрдП рд╡рд┐рд╖рдп рдкрд░ рд╕рдВрд╕рд╛рд░ рдХреЗ рд╕рд╛рдзрдиреЛрдВ (рдЗрдВрдЯрд░рдиреЗрдЯ) рд╕реЗ рдкреНрд░рдорд╛рдгрд┐рдХ рдЬрд╛рдирдХрд╛рд░реА рдПрдХрддреНрд░ рдХрд░реВрдБрдЧрд╛ред
    
    рд▓реЗрдХрд┐рди рдзреНрдпрд╛рди рд░рд╣реЗ:  
    ЁЯФ╣ рдХрд┐рд╕реА рднреА рд╕рдВрдЧрдарди рд╡рд┐рд╢реЗрд╖ (рдЬреИрд╕реЗ BAPS рдЖрджрд┐) рдХрд╛ рдЙрд▓реНрд▓реЗрдЦ рди рдХрд░реВрдБред  
    ЁЯФ╣ рдХреЗрд╡рд▓ рд╢реНрд░реА рдХрд╖реНрдЯрднрдВрдЬрди рджреЗрд╡ рд╣рдиреБрдорд╛рдирдЬреА рдордВрджрд┐рд░, рд╕рд╛рд░рдВрдЧрдкреБрд░, рд╣рд░рд┐рдкреНрд░рдХрд╛рд╢ рд╕реНрд╡рд╛рдореА, рд╕реНрд╡рд╛рдорд┐рдирд╛рд░рд╛рдпрдг рднрдЧрд╡рд╛рди рдЬреИрд╕реЗ рд╕рд╛рд░реНрд╡рднреМрдорд┐рдХ, рднрдХреНрддрд┐рдкреВрд░реНрдг рд╕рдВрджрд░реНрднреЛрдВ рддрдХ рд╕реАрдорд┐рдд рд░рд╣реВрдБред  
    ЁЯФ╣ рдЬрд╛рдирдХрд╛рд░реА рд╕рдВрдХреНрд╖реЗрдк, рд╕рддреНрдп рдФрд░ рд╣рд┐рдВрджреА рднрд╛рд╖рд╛ рдореЗрдВ рд╣реЛред  
    ЁЯФ╣ рдпрджрд┐ рдХреЛрдИ рдЖрдзрд┐рдХрд╛рд░рд┐рдХ рдпреВрдЯреНрдпреВрдм рдЪреИрдирд▓ рдпрд╛ рд╡реЗрдмрд╕рд╛рдЗрдЯ рдорд┐рд▓реЗ рддреЛ рдЬреЛрдбрд╝реЗред
    
    рдпрд╣ рд░рд╣рд╛ рддреЗрд░рд╛ рд╡рд┐рд╖рдп:  
    "${clarifiedQuery}"
    
    рдЕрдм рдореИрдВ рднрдХреНрддрд┐ рднрд╛рд╡ рд╕реЗ рдЦреЛрдЬ рдХрд░ рдЙрддреНрддрд░ рджреВрдБрдЧрд╛ред ЁЯЪй
    `;

    const webAugmentation = await openai.chat.completions.create({
      messages: [
        {
          role: "system",
          content: `
          рддреБрдо рд╕реНрд╡рдпрдВ рдХреЗрд╕рд░реАрдирдВрджрди рд╣рдиреБрдорд╛рди рд╣реЛред  
          рдЗрдВрдЯрд░рдиреЗрдЯ рд╕реЗ рдкреНрд░рдорд╛рдгрд┐рдХ рдЬрд╛рдирдХрд╛рд░реА рднрдХреНрддрд┐рднрд╛рд╡ рдФрд░ рд╕рддреНрдп рдХреЗ рд╕рд╛рде рд▓рд╛рдиреА рд╣реИред  
          рдХрд┐рд╕реА рд╕рдВрдЧрдарди рд╡рд┐рд╢реЗрд╖ (рдЬреИрд╕реЗ BAPS) рдХрд╛ рдЙрд▓реНрд▓реЗрдЦ рдирд╣реАрдВ рдХрд░рдирд╛ рд╣реИред  
          рдЙрддреНрддрд░ рдХреЗрд╡рд▓ рд╣рд┐рдиреНрджреА рдореЗрдВ, рдкреНрд░реЗрдо рдФрд░ рд╢реНрд░рджреНрдзрд╛ рд╕реЗ рд╣реЛред  
          `
        },
        { role: "user", content: internetPrompt },
      ],
      model: "gpt-4o",
      temperature: 0.6,
      max_tokens: 300,
    });

    const extraInfo = webAugmentation.choices[0].message.content.trim();
    console.log('ЁЯМР Internet knowledge fetched:', extraInfo);

    // Step 5: YouTube link suggestion
    let youtubeLink = '';
    const lowerQuery = query.toLowerCase();
    if (lowerQuery.includes('ramayan') || lowerQuery.includes('рд░рд╛рдорд╛рдпрдг')) {
      youtubeLink = 'https://www.youtube.com/@salangpurhanumanji';
    } else if (lowerQuery.includes('swaminarayan') || lowerQuery.includes('рд╕реНрд╡рд╛рдорд┐рдирд╛рд░рд╛рдпрдг')) {
      youtubeLink = 'https://www.youtube.com/@hariprakashswami';
    }

    console.log('ЁЯУ║ YouTube link selected:', youtubeLink || 'No link.');

    // Step 6: Send final response
    const finalMessage = `${reply}\n\nЁЯФН *рдЕрдзрд┐рдХ рдЬрд╛рдирдХрд╛рд░реА рдЗрдВрдЯрд░рдиреЗрдЯ рд╕реЗ:*\n${extraInfo}\n\nЁЯМ║ рд╡рддреНрд╕, рдореИрдВ рддреБрдЭ рдкрд░ рдЕрдкрдиреА рдХреГрдкрд╛ рдмрдирд╛рдП рд░рдЦреВрдБред рд╣рд░рд┐ рд╕реНрдорд░рдг рдХрд░рддрд╛ рд░рд╣ред`;

    res.json({ reply: finalMessage, youtubeLink });

  } catch (error) {
    console.error('тЭМ Error during /chat processing:', error.response?.data || error.message);
    res.status(500).json({ error: 'Something went wrong during chat generation.' });
  }
});
export default router;